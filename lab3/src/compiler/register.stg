group pierwszy;

end(prog) ::= <<
<prog>
BRK
>>

deflt(elem) ::= <<
    <elem; separator="\n">
>>

int(i) ::= <<
MOV A,#<i>
>>

twoop(p1, p2) ::= <<
<p2>
PUSH A
<p1>
POP B
>>

add(p1,p2) ::= <<
<twoop(p1,p2)>
ADD A,B
>>

sub(p1,p2) ::= <<
<twoop(p1,p2)>
SUB A,B
>>

mul(p1,p2) ::= <<
<twoop(p1,p2)>
MUL A,B
>>

div(p1,p2) ::= <<
<twoop(p1,p2)>
DIV A,B
>>

dec(n) ::= <<
DD <n>
>>

read(n) ::= <<
MOV A, [<n>]
>>

write(n) ::= <<
MOV [<n>], A
>>


assign(name, expr) ::= <<
<expr>
<write(name)>
>>

init(name, expr) ::= <<
<dec(name)>
<expr>
<write(name)>
>>

eq(p1, p2) ::= <<
<twoop(p1,p2)>
CMP A, B
>>

cond(labelID, condition, if_true, if_false="null")::=<<
; if
; condition:
<condition>
JNE cond_<labelID>_false
; if true:
<if_true>
JMP cond_<labelID>_end
; if false:
cond_<labelID>_false:
<if_false>
cond_<labelID>_end:
>>

//read(n) ::= <<
//MOV A, [<n>]
